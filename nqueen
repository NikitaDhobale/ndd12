def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, row, solutions):
    n = len(board)
    if row == n:
        solutions.append(["".join(["Q" if cell == 1 else "." for cell in row]) for row in board])
        return

    for col in range(n):
        if is_safe(board, row, col):
            board[row][col] = 1
            solve_n_queens_util(board, row + 1, solutions)
            board[row][col] = 0

def solve_n_queens(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    solutions = []
    solve_n_queens_util(board, 0, solutions)
    return solutions

def print_solutions(solutions):
    for i, solution in enumerate(solutions):
        print(f"Solution {i + 1}:")
        for row in solution:
            print(row)
        print()

if __name__ == "__main__":
    n = int(input("Enter the board size (N): "))
    solutions = solve_n_queens(n)
    print_solutions(solutions)
